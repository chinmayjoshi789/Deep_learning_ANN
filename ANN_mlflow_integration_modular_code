

# Use ngrok to expose the tracking server to a public URL
!pip install pyngrok
!pip install mlflow
from pyngrok import ngrok
!ngrok config upgrade --relocate
ngrok.set_auth_token("----")  # Replace -' with your ngrok auth token


import mlflow
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import os

def load_data(data_url):
    data = pd.read_csv(data_url)
    data = data.drop('Surname', axis=1)
    X = data.drop('Exited', axis=1)
    y = data['Exited']
    return X, y

def preprocess_data(X):
    categorical_features = ['Geography', 'Gender']
    numeric_features = [col for col in X.columns if col not in categorical_features]

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numeric_features),
            ('cat', OneHotEncoder(), categorical_features)
        ])
    X = preprocessor.fit_transform(X)
    return X

def build_model(input_shape, hidden_layers, hidden_units):
    model = Sequential()
    model.add(Dense(units=hidden_units, activation='relu', input_dim=input_shape))

    for _ in range(hidden_layers):
        model.add(Dense(units=hidden_units, activation='relu'))

    model.add(Dense(units=1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

def train_and_evaluate_model(X_train, y_train, X_test, y_test, hidden_layers, hidden_units, epochs):
    model = build_model(X_train.shape[1], hidden_layers, hidden_units)
    model.fit(X_train, y_train, epochs=epochs, batch_size=32)

    y_pred = model.predict(X_test)
    y_pred = (y_pred > 0.5)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    return accuracy, precision, recall, f1

def run_experiment(data_url, hidden_layers, hidden_units, epochs,artifact_location):
      # Create a new experiment with the specified artifact location
    experiment_id = mlflow.create_experiment("cj1", artifact_location=artifact_location)

    with mlflow.start_run(experiment_id=experiment_id,nested=True):
    # with mlflow.start_run(artifact_uri=artifact_location,nested=True):
        X, y = load_data(data_url)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        X_train = preprocess_data(X_train)
        X_test = preprocess_data(X_test)

        mlflow.log_param("Data URL", data_url)
        mlflow.log_param("Hidden Layers", hidden_layers)
        mlflow.log_param("Hidden Units", hidden_units)
        mlflow.log_param("Epochs", epochs)

        accuracy, precision, recall, f1 = train_and_evaluate_model(X_train, y_train, X_test, y_test, hidden_layers, hidden_units, epochs)
        mlflow.log_metric("Accuracy", accuracy)
        mlflow.log_metric("Precision", precision)
        mlflow.log_metric("Recall", recall)
        mlflow.log_metric("F1 Score", f1)

if __name__ == '__main__':
    data_url = 'https://raw.githubusercontent.com/chinmayjoshi78/datasets/Churn_Modelling.csv'
    hidden_layers = [1]
    hidden_units = [32]
    epochs = [10]
    # artifact_location = "/content/artifacts/0"
    artifact_location = os.path.abspath("/content/mlruns/0")

    for hl in hidden_layers:
        for hu in hidden_units:
            for e in epochs:
                run_experiment(data_url, hl, hu, e,artifact_location)


import subprocess
from pyngrok import ngrok

def main():
  # Set the ngrok auth token
  ngrok.set_auth_token('---') # replace with your ngrok token

  # Create a tunnel to MLflow on port 5000
  tunnel = ngrok.connect(addr='5000', proto='http')

  # Print the public URL of the tunnel
  print(tunnel.public_url)

  # Start MLflow in the background
  subprocess.Popen(["mlflow", "server", "--host", "0.0.0.0", "--port", "5000"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

if __name__ == '__main__':
  main()
